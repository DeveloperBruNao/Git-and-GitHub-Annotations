Minha documentação de Git e GitHub 

ROADMAP

- O que é Git
Git é um sistema de controle de versão distribuído, usado para rastrear alterações no código e facilitar o trabalho em equipe.

- O que é GitHub?
GitHub é uma plataforma para hospedar repositórios Git, colaborando em projetos e armazenando o código online.

Anotações:
Controle de versão: Permite que você volte a versões anteriores do código.
Git é instalado localmente; GitHub é uma plataforma online.
Repositórios são onde seu código e histórico de versões são armazenados.

- Configuração do Git:
git config --global user.name "Seu Nome"
git config --global user.email "seuemail@exemplo.com"

Anotações:
O --global significa que essa configuração é válida para todos os repositórios na sua máquina.

#Criando um repositório Local:
Dentro da pasta criada com o projeto (Open GitBash Here)

#Adicione o arquivo ao controle do Git e confirme a alteração:
Escrever: git init
Após ter criado um arquivo, por exemplo teste.txt
Escrever: **git add teste.txt**, ou se quiser adicionar todos os arquivos **git add .**
Escrever: git commit -m "Adiciona arquivo teste.txt"

IMPORTANTE: 
git add: Prepara os arquivos para o commit.
git commit: Salva as alterações no histórico do repositório. (O commit deve ter uma mensagem clara que descreva o que foi feito.)

Criando e Subindo para o GitHub
- Criar um novo Repositório no GitHub (NewRepository)

**Conectar o repositório local ao GitHub**
git remote add origin (https do repositório do git) -Isso conecta seu repositório local ao remoto no GitHub.

**Envie os arquivos para o GitHub**
git push -u origin master

#Ciclo básico de Trabalho
git add . (Adicione as mudanças ao Git)
git commit -m "Descrição das alterações" (Confirme as mudanças)
git push (Envie para o GitHub)

#Branches e Colaboração
. Criação de branches (Branches permitem trabalhar em novas funcionalidades sem afetar o código principal.
Exemplo de criação de uma branch:)
git checkout -b nova-feature (cria e muda para a nova branch)

. Unindo branches ao código principal (Depois de terminar as alterações na branch, volte para a branch principal e faça o merge)
git checkout main
git merge nova-feature

. Trabalho corabolativo (Para pegar alterações de outros colaboradores)
git pull





